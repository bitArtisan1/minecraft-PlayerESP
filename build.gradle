plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Needed for mod dependencies that aren't in the default repos
    // Loom automatically adds the essential repos for MC and libs
    
    // For Mod Menu
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "playeresp" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
    
    runs {
        // Dev client config
        client {
            client()
            name "Minecraft Client"
            vmArgs "-Xmx2G"
            // Using my dev username for testing
            programArgs "--username", "bitArtisan1", "--uuid", "00000000-0000-0000-0000-000000000000"
        }
        // Server config for testing
        server {
            server()
            name "Minecraft Server"
            vmArgs "-Xmx2G"
        }
    }
}

dependencies {
    // Core MC stuff - versions are in gradle.properties
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API - needed for most mod functionality
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Mod Menu for config screen integration
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// Java 21 target
def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // UTF-8 encoding to avoid weird character issues
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Generate sources jar for debugging
    withSourcesJar()
}

jar {
    // Include license in the jar
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// Publishing config (probably won't use this but it's here)
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        // Would add publishing repos here if needed
    }
}